// Right cases

class rightCases {
    protected a;
    static a = 4;
    public static a: boolean;
    @Input() a;
    @Input('someEvent') a;

    @Input() twoWayBinding;
    @Output() twoWayBindingChange = new EventEmitter();

    @Input()
    set a() {
        /* some code */
    }
    /* some comment */
    @Input()
    set a(value: boolean) {
        const b = value;
    }
    @Input()
    get a(): number {
        return b;
    }

    @Output() a;
    @Output() a = new EventEmitter();

    @Output()
    set a() {
        /* some code */
    }
    @Output()
    set a(value: number) {
        v = value;
    }
    @Output()
    get a(): string {
        return 'all right!';
    }

}

// Wrong cases

class failure {
    @Input() name: string;

    @Input()
    ~~~~~~      [13]
    set lastName(value: string) {
        this.callLongMethod(value);
    }

    @Input() middleName: string;
}

class failure {
    @Input() name: string;

    @Input() middleName: string;

    @Input()
    set lastName(value: string) {
        this.callLongMethod(value);
    }

    someVal: number
    ~~~~~~~      [15]
}

class failure {
    static a;

    @Input() a;

    @Input('onselect') wayBind;
    @Output('onselect') wayBindChange;

    @Input()
    ~~~~~~      [13]
    set a(value: number) {
        /* some code */
    }

    @Input() a;

    @Output() a;
}

class failure {
    @Input() a;

    static a;
    ~~~~~~      [0]

    @Input() a;

    @Input()
    get a(): number {
        return 5;
    }

    @Input('onselect')
    set a(value: string) {
        this.b = value;
    }

    @Output('onselect') b = new EventEmitter();

    @Output()
    get b(): string {
        /* I don't know how to use it */
    }

    @Output()
    ~~~~~~~      [14]
    set b(value: boolean) {
        /* And it */
    }

    @Output('heh') b = new EventEmitter();
}

class failure {
    @Input() a;
    @Output() aChange;

    @Input
    get a(): boolean {
        return true;
    }

    @Output()
    set aChange(value: number) {
        /* some code */
    }

    @Input('onselect') a;
    @Output('onselect')
    readonly aChange = this.ready.switchMap(() => this.parentsScrollService.callbackStream);

    @Input()
    set a(value: number) {
        /* code code code */
    }

    @Input()
    ~~~~~~      [13]
    get a(): number {
        return 5;
    }

    @Input() a;

    @Input() a;
}

class failure {
    @Input() a;
    @Output() aChange;

    @Input
    get a(): boolean {
        return true;
    }

    @Output()
    set aChange(value: number) {
        /* some code */
    }

    @Input('onselect') a;
    @Output('onselect')
    readonly aChange = this.ready.switchMap(() => this.parentsScrollService.callbackStream);

    @Output()
    set a(value: number) {
        /* code code code */
    }

    @Output()
    ~~~~~~~      [14]
    get a(): number {
        return 5;
    }

    @Output() a;

    @Input() a;
    ~~~~~~      [2]
}

[0]: PUBLIC STATIC property must be before @Input
[1]: PUBLIC STATIC property must be before @Output
[2]: @Input must be before @Output
[3]: @Input must be before PUBLIC INSTANCE property
[4]: @Input must be before PROTECTED STATIC property
[5]: @Input must be before PROTECTED INSTANCE property
[6]: @Input must be before PRIVATE STATIC property
[7]: @Input must be before PRIVATE INSTANCE property
[8]: @Output must be before PUBLIC INSTANCE property
[9]: @Output must be before PROTECTED STATIC property
[10]: @Output must be before PROTECTED INSTANCE property
[11]: @Output must be before PRIVATE STATIC property
[12]: @Output must be before PRIVATE INSTANCE property
[13]: @Input get/set accessor must be at the end of input's declarations
[14]: @Output get/set accessor must be at the end of output's declarations
[15]: PUBLIC INSTANCE property must be before @Input